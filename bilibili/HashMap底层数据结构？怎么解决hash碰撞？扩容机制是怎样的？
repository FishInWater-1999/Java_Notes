HashMap底层数据结构？怎么解决hash碰撞？扩容机制是怎样的？

张三同学今天去面试，面试官问了这么个问题
聊一下 HashMap底层数据结构？
面试官觉得这个问题他肯定不会
我会
啊？
首先，HashMap数据结构的演变分为 JDK1.7 和 JDK 1.8 两个部分
这你都知道？
￼
[](https://upload-images.jianshu.io/upload_images/19118844-a15611b65d6d7b64.png?imageMogr2/auto-orient/strip|imageView2/2/w/922/format/webp)
JDK1.7的时候使用的是数组+ 单链表的数据结构。
并且，由于JDK1.7是用单链表进行的纵向延伸，而且添加新元素是采用的是头插法，这就导致其容易出现逆序且环形链表死循环问题。
那该怎么办呢？

￼
[](https://upload-images.jianshu.io/upload_images/19118844-158d40d193ede35e.png?imageMogr2/auto-orient/strip|imageView2/2/w/414/format/webp)
但是在JDK1.8及之后时，使用的是数组+链表+红黑树的数据结构
这样一来，当链表的深度达到8的时候，也就是默认阈值，就会自动扩容把链表转成红黑树的数据结构，来把时间复杂度从O（n）变成O（logN）提高了效率


好，那我再问你？HashMap 怎么解决hash碰撞？
HashMap 解决hash碰撞主要是采用两种方法：链表法和开放地址法
链表法就是将相同hash值的对象组织成一个链表放在hash值对应的槽位；
开放地址法是通过一个探测算法，当某个槽位已经被占据的情况下继续查找下一个可以使用的槽位。
还需要详细的展开讲讲吗？

不了，你说说HashMap的扩容机制是怎样的吧？
首先，我们要知道什么时候才需要扩容，这主要分为三种情况
第一种：在首次调用put方法的时候，初始化数组table 时
第二种：当HashMap中的元素个数超过数组大小(数组长度)*loadFactor(负载因子)时，就会进行数组扩容。
第三种：当HashMap中的其中一个链表的对象个数如果达到了8个，此时如果数组长度没有达到64，那么HashMap会先扩容解决，如果已经达到了64，那么这个链表会变成红黑树，节点类型由Node变成TreeNode类型。

那么HashMap的扩容机制究竟是什么呢？
啊这？
闻到盲区了呀 /坏笑
我先去下厕所，下期再聊！biu
啊？喂 ！你回来，别走呀！

我是up主黎明韭菜，欢迎用你的三连催更呦～
